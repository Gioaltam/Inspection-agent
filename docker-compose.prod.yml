version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: inspection_db
    environment:
      POSTGRES_DB: inspection_portal
      POSTGRES_USER: ${DB_USER:-inspection_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - inspection_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-inspection_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (optional, for session management)
  redis:
    image: redis:7-alpine
    container_name: inspection_redis
    ports:
      - "6379:6379"
    networks:
      - inspection_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: inspection_backend
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${DB_USER:-inspection_user}:${DB_PASSWORD:-changeme}@db:5432/inspection_portal
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost}
    volumes:
      - ./workspace:/app/workspace
      - ./static:/app/static
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - inspection_network
    restart: unless-stopped
    command: uvicorn backend.app.main:app --host 0.0.0.0 --port 8000 --workers 4

  # Gallery Server
  gallery:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: inspection_gallery
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${DB_USER:-inspection_user}:${DB_PASSWORD:-changeme}@db:5432/inspection_portal
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./workspace:/app/workspace
      - ./static:/app/static
    ports:
      - "8005:8005"
    depends_on:
      - backend
    networks:
      - inspection_network
    restart: unless-stopped
    command: python simple_portal_server.py

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: inspection_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - gallery
    networks:
      - inspection_network
    restart: unless-stopped
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: inspection_certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - inspection_network

networks:
  inspection_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: